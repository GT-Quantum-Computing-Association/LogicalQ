from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit

import sys, importlib
importlib.reload(sys.modules['steane_code'])
from steane_code import encode_gate

class LogicalCircuit(QuantumCircuit):
    def __init__(
            self,
            n_logical_qubits,
            name: str | None = None,
        ):

        # @TODO - Integrate logical registers into the quantum circuit
        self.n = 7

        # Each quantum register stores a single logical qubit
        self.logical_qregs = [QuantumRegister(self.n, name=f"q{i}") for i in range(n_logical_qubits)]

        # The full circuit is generated by calling super()
        super().__init__(*self.logical_qregs, name=name)

        print("woah")

    def add_logical_qubits(self, qubit_count):
        current_qubit_count = len(self.logical_qregs)

        for i in range(current_qubit_count, current_qubit_count + qubit_count):
            qreg_i = QuantumRegister(self.n, name=f"q{i}")

            self.logical_qregs.append(qreg_i)
            super().add_register(qreg_i)

    def encode(self, *qubits, initial_state=0):
        """
        Prepare logical qubit(s) in the specified initial state
        """

        for q in qubits:
            super().append(encode_gate(), self.logical_qregs[q])

            if initial_state == 1:
                super().x(self.logical_qregs[q])

        return

    def x(self, *targets):
        """
        Logical PauliX operation
        """

        for t in targets:
            super().x(self.logical_qregs[t])
    
    def cx(self, control, *targets):
        """
        Logical Controlled-PauliX operation
        """

        for t in targets:
            super().cx(self.logical_qregs[control], self.logical_qregs[t])

    def measure_syndrome():
        # @TODO - Measure syndromes
        pass
